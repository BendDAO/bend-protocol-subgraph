# --------------------------------------
# Bend Entities
# --------------------------------------
type Protocol @entity {
  # just 1 for now
  id: ID!
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

# service entity, when we receiving an event we should wknow which pool is it
type ContractToPoolMapping @entity {
  # contract address
  id: ID!
  pool: Pool!
}

type PoolConfigurationHistoryItem @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  active: Boolean
  pool: Pool!
  lendPool: Bytes
  lendPoolConfigurator: Bytes
  lendPoolLoan: Bytes
  lendPoolConfiguratorImpl: Bytes
  lendPoolImpl: Bytes
  lendPoolLoanImpl: Bytes
  reserveOracle: Bytes
  nftOracle: Bytes
  bnftRegistry: Bytes
  configurationAdmin: Bytes
  emergencyAdmin: Bytes
  timestamp: Int!
}

type Pool @entity {
  id: ID!
  protocol: Protocol!
  lendPoolConfigurator: Bytes
  lendPool: Bytes
  lendPoolLoan: Bytes
  lendPoolConfiguratorImpl: Bytes
  lendPoolImpl: Bytes
  lendPoolLoanImpl: Bytes
  reserveOracle: Bytes
  nftOracle: Bytes
  bnftRegistry: Bytes
  configurationAdmin: Bytes
  emergencyAdmin: Bytes
  history: [PoolConfigurationHistoryItem!]! @derivedFrom(field: "pool")
  lastUpdateTimestamp: Int!

  reserves: [Reserve!]! @derivedFrom(field: "pool")
  nfts: [NFT!]! @derivedFrom(field: "pool")

  depositHistory: [Deposit!]! @derivedFrom(field: "pool")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "pool")
  borrowHistory: [Borrow!]! @derivedFrom(field: "pool")
  repayHistory: [Repay!]! @derivedFrom(field: "pool")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "pool")

  active: Boolean!
  paused: Boolean!
}

type PriceHistoryItem @entity {
  id: ID!
  asset: PriceOracleAsset!
  price: BigInt!
  timestamp: Int!
}

type UsdEthPriceHistoryItem @entity {
  id: ID!
  oracle: PriceOracle!
  price: BigInt!
  timestamp: Int!
}

type ChainlinkAggregator @entity {
  # aggregator address
  id: ID!
  oracleAsset: PriceOracleAsset!
}

# TODO: check nomenclature
type PriceOracleAsset @entity {
  # underlying asset address
  id: ID!
  oracle: PriceOracle!
  priceInEth: BigInt!
  priceSource: Bytes!
  isFallbackRequired: Boolean!
  dependentAssets: [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
  priceHistory: [PriceHistoryItem!]! @derivedFrom(field: "asset")
  fromChainlinkSourcesRegistry: Boolean!
}

type PriceOracle @entity {
  id: ID!
  proxyPriceProvider: Bytes!
  usdPriceEth: BigInt!
  usdPriceEthMainSource: Bytes!
  usdPriceEthFallbackRequired: Boolean!
  usdDependentAssets: [PriceOracleAsset!]!
  fallbackPriceOracle: Bytes!
  tokens: [PriceOracleAsset!]! @derivedFrom(field: "oracle")
  usdPriceEthHistory: [UsdEthPriceHistoryItem!]! @derivedFrom(field: "oracle")
  tokensWithFallback: [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
  version: Int!
}

type BToken @entity {
  """
  BToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

type DebtToken @entity {
  """
  DebtToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

enum LoanState {
  DUMMY_DO_NOT_USE
  Created
  Active
  Repaid
  Defaulted
}

type Referrer @entity {
  id: ID!
  deposits: [Deposit!]! @derivedFrom(field: "referrer")
  borrows: [Borrow!]! @derivedFrom(field: "referrer")
}

interface UserTransaction {
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
}

type Deposit implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  onBehalfOf: User!
  amount: BigInt!
  referrer: Referrer
  timestamp: Int!
}

type Withdraw implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  to: User!
  amount: BigInt!
  timestamp: Int!
}

type Borrow implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  onBehalfOf: User!
  amount: BigInt!
  borrowRate: BigInt!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  loanId: Loan!
  referrer: Referrer
  timestamp: Int!
}

type Repay implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  repayer: User!
  amount: BigInt!
  loanId: Loan!
  timestamp: Int!
}

type Liquidate implements UserTransaction @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  repayAmount: BigInt!
  borrowerAmount: BigInt!
  liquidator: Bytes!
  onBehalfOf: User!
  loanId: Loan!
  timestamp: Int!
}

type ReserveConfigurationHistoryItem @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  reserve: Reserve!
  borrowingEnabled: Boolean!
  isActive: Boolean!
  isFrozen: Boolean!
  reserveInterestRateStrategy: Bytes!
  timestamp: Int!
}

type NftConfigurationHistoryItem @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  nftAsset: NFT!
  isActive: Boolean!
  isFrozen: Boolean!
  baseLTVasCollateral: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  timestamp: Int!
}

type ReserveParamsHistoryItem @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  reserve: Reserve!
  variableBorrowRate: BigInt!
  variableBorrowIndex: BigInt!
  utilizationRate: BigDecimal!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  totalLiquidity: BigInt!
  totalBTokenSupply: BigInt!
  availableLiquidity: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!
  totalScaledVariableDebt: BigInt!
  totalCurrentVariableDebt: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeLiquidity: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
  lifetimeReserveFactorAccrued: BigInt!
  lifetimeDepositorsInterestEarned: BigInt!
}

type NftParamsHistoryItem @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  nftAsset: NFT!
  totalCollateral: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!
  lifetimeRepayments: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
}

type MapAssetPool @entity {
  """
  address of a /s /v token
  """
  id: ID!
  pool: String!
  underlyingAsset: Bytes!
}

type Reserve @entity {
  """
  Reserve address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  decimals: Int!
  borrowingEnabled: Boolean! # defalt false
  reserveFactor: BigInt! #default 0
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false
  price: PriceOracleAsset!

  bToken: BToken!
  debtToken: DebtToken!

  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  baseVariableBorrowRate: BigInt!
  utilizationRate: BigDecimal! # default: 0

  liquidityRate: BigInt! # depositors interest
  variableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!

  totalLiquidity: BigInt! # default: 0
  availableLiquidity: BigInt! # default: 0
  totalBTokenSupply: BigInt!
  totalScaledVariableDebt: BigInt! # default: 0
  totalCurrentVariableDebt: BigInt! # default: 0

  lastUpdateTimestamp: Int!

  lifetimeScaledVariableDebt: BigInt! # default: 0
  lifetimeCurrentVariableDebt: BigInt! # default: 0

  lifetimeLiquidity: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0

  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeReserveFactorAccrued: BigInt!

  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")

  depositHistory: [Deposit!]! @derivedFrom(field: "reserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "reserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "reserve")
  repayHistory: [Repay!]! @derivedFrom(field: "reserve")

  paramsHistory: [ReserveParamsHistoryItem!]! @derivedFrom(field: "reserve")
  configurationHistory: [ReserveConfigurationHistoryItem!]! @derivedFrom(field: "reserve")
}

type NFT @entity {
  """
  NFT address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false
  baseLTVasCollateral: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  bnftToken: Bytes!
  price: PriceOracleAsset!

  totalCollateral: BigInt! # default: 0

  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0

  lastUpdateTimestamp: Int!

  userNfts: [UserNft!]! @derivedFrom(field: "nftAsset")
  loans: [Loan!]! @derivedFrom(field: "nftAsset")

  borrowHistory: [Borrow!]! @derivedFrom(field: "nftAsset")
  repayHistory: [Repay!]! @derivedFrom(field: "nftAsset")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "nftAsset")
  loanHistory: [Loan!]! @derivedFrom(field: "nftAsset")

  paramsHistory: [NftParamsHistoryItem!]! @derivedFrom(field: "nftAsset")
  configurationHistory: [NftConfigurationHistoryItem!]! @derivedFrom(field: "nftAsset")
}

type BTokenBalanceHistoryItem @entity {
  """
  userReserve + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  userReserve: UserReserve!
  timestamp: Int!
  scaledBTokenBalance: BigInt!
  currentBTokenBalance: BigInt!
  index: BigInt!
}

type DebtTokenBalanceHistoryItem @entity {
  """
  userReserve + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  userReserve: UserReserve!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  timestamp: Int!
  index: BigInt!
}

type UserReserve @entity {
  """
  user address + reserve address
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  scaledBTokenBalance: BigInt!
  currentBTokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  currentTotalDebt: BigInt!
  liquidityRate: BigInt!
  variableBorrowIndex: BigInt!

  """
  Amount in currency units included as fee
  """
  lastUpdateTimestamp: Int!
  bTokenBalanceHistory: [BTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  debtTokenBalanceHistory: [DebtTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")

  depositHistory: [Deposit!]! @derivedFrom(field: "userReserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "userReserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "userReserve")
  repayHistory: [Repay!]! @derivedFrom(field: "userReserve")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "userReserve")
}

type UserNft @entity {
  """
  user address + nft collection address
  """
  id: ID!
  pool: Pool!
  nftAsset: NFT!
  user: User!

  totalCollateral: BigInt!

  lastUpdateTimestamp: Int!

  borrowHistory: [Borrow!]! @derivedFrom(field: "userNft")
  repayHistory: [Repay!]! @derivedFrom(field: "userNft")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "userNft")
}

type LoanBalanceHistoryItem @entity {
  """
  loan + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  loan: Loan!
  timestamp: Int!
  scaledAmount: BigInt!
  currentAmount: BigInt!
  index: BigInt!
}

type Loan @entity {
  """
  loan id
  """
  id: ID!
  pool: Pool!
  user: User!
  loanId: BigInt!
  borrower: User!
  nftAsset: NFT!
  nftTokenId: BigInt!
  reserveAsset: Reserve!
  scaledAmount: BigInt!
  currentAmount: BigInt!
  state: LoanState!

  lastUpdateTimestamp: Int!

  loanBalanceHistory: [LoanBalanceHistoryItem!]! @derivedFrom(field: "loan")
}

type User @entity {
  """
  user address
  """
  id: ID!
  borrowedReservesCount: Int!
  collateralNftsCount: Int!

  reserves: [UserReserve!]! @derivedFrom(field: "user")
  nfts: [UserNft!]! @derivedFrom(field: "user")
  loands: [Loan!]! @derivedFrom(field: "user")

  depositHistory: [Deposit!]! @derivedFrom(field: "user")
  withdrawUnderlyingHistory: [Withdraw!]! @derivedFrom(field: "user")
  borrowHistory: [Borrow!]! @derivedFrom(field: "user")
  repayHistory: [Repay!]! @derivedFrom(field: "user")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "user")
}
