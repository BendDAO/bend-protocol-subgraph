# --------------------------------------
# Bend Entities
# --------------------------------------

type _Schema_
  @fulltext(
    name: "bendSearch"
    language: en
    algorithm: rank
    include: [
      { entity: "Reserve", fields: [{ name: "name" }, { name: "symbol" }] }
      { entity: "NFT", fields: [{ name: "name" }, { name: "symbol" }] }
    ]
  )

type Protocol @entity(immutable: false) {
  # just 1 for now
  id: ID!
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

# service entity, when we receiving an event we should wknow which pool is it
type ContractToPoolMapping @entity(immutable: false) {
  # contract address
  id: ID!
  pool: Pool!
}

type PoolConfigurationHistoryItem @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  active: Boolean
  pool: Pool!
  lendPool: Bytes
  lendPoolConfigurator: Bytes
  lendPoolLoan: Bytes
  lendPoolConfiguratorImpl: Bytes
  lendPoolImpl: Bytes
  lendPoolLoanImpl: Bytes
  reserveOracle: Bytes
  nftOracle: Bytes
  bnftRegistry: Bytes
  configurationAdmin: Bytes
  emergencyAdmin: Bytes
  incentivesController: Bytes
  uiDataProvider: Bytes
  bendDataProvider: Bytes
  walletBalanceProvider: Bytes
  timestamp: Int!
}

type Pool @entity(immutable: false) {
  id: ID!
  protocol: Protocol!
  lendPoolConfigurator: Bytes
  lendPool: Bytes
  lendPoolLoan: Bytes
  lendPoolConfiguratorImpl: Bytes
  lendPoolImpl: Bytes
  lendPoolLoanImpl: Bytes
  reserveOracle: Bytes
  nftOracle: Bytes
  bnftRegistry: Bytes
  configurationAdmin: Bytes
  emergencyAdmin: Bytes
  incentivesController: Bytes
  uiDataProvider: Bytes
  bendDataProvider: Bytes
  walletBalanceProvider: Bytes
  history: [PoolConfigurationHistoryItem!]! @derivedFrom(field: "pool")
  lastUpdateTimestamp: Int!

  reserves: [Reserve!]! @derivedFrom(field: "pool")
  nfts: [NFT!]! @derivedFrom(field: "pool")

  depositHistory: [Deposit!]! @derivedFrom(field: "pool")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "pool")
  borrowHistory: [Borrow!]! @derivedFrom(field: "pool")
  repayHistory: [Repay!]! @derivedFrom(field: "pool")
  auctionHistory: [Repay!]! @derivedFrom(field: "pool")
  redeemHistory: [Repay!]! @derivedFrom(field: "pool")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "pool")

  active: Boolean!
  paused: Boolean!
  pauseStartTime: BigInt!
  pauseDurationTime: BigInt!
}

type PriceHistoryItem @entity(immutable: false) {
  id: ID!
  asset: PriceOracleAsset!
  price: BigInt!
  floorPrice: BigInt!
  timestamp: Int!
}

type UsdEthPriceHistoryItem @entity(immutable: false) {
  id: ID!
  oracle: PriceOracle!
  price: BigInt!
  priceFormated: BigInt!
  timestamp: Int!
}

type ChainlinkAggregator @entity(immutable: false) {
  # aggregator address
  id: ID!
  oracleAsset: PriceOracleAsset!
  answerDecimals: Int!
  createTimestamp: Int!
}

type PriceOracleAsset @entity(immutable: false) {
  # underlying asset address
  id: ID!
  oracle: PriceOracle!

  answerDecimals: Int!
  priceDecimals: Int!
  priceInEth: BigInt!
  floorPriceInEth: BigInt!
  priceSource: Bytes!
  fallbackRequired: Boolean!
  lastUpdateTimestamp: Int!

  priceHistory: [PriceHistoryItem!]! @derivedFrom(field: "asset")
}

type PriceOracle @entity(immutable: false) {
  id: ID!
  proxyPriceProvider: Bytes!

  # usd price not needed in nft oracle, just query from reserve oracle
  usdPriceDecimals: Int!
  usdPriceEth: BigInt!
  usdPriceEthFormated: BigInt!
  usdPriceEthMainSource: Bytes!
  usdPriceEthFallbackRequired: Boolean!
  lastUpdateTimestamp: Int!

  tokens: [PriceOracleAsset!]! @derivedFrom(field: "oracle")

  usdPriceEthHistory: [UsdEthPriceHistoryItem!]! @derivedFrom(field: "oracle")
}

type BToken @entity(immutable: false) {
  """
  BToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

type DebtToken @entity(immutable: false) {
  """
  DebtToken address
  """
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

enum LoanState {
  None
  Created
  Active
  Auction
  Repaid
  Defaulted
}

enum TokenEventType {
  None
  Mint
  Burn
  Transfer
}

enum TxType {
  None
  Deposit
  Withdraw
  Borrow
  Repay
  Auction
  Redeem
  Liquidate
}

type Referrer @entity(immutable: false) {
  id: ID!
  deposits: [Deposit!]! @derivedFrom(field: "referrer")
  borrows: [Borrow!]! @derivedFrom(field: "referrer")
}

interface UserTransaction {
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
}

type UserTransactionHistoryItem implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
  txType: TxType!
  onBehalfOf: User!

  nftAsset: NFT
  nftTokenId: BigInt
  loan: Loan
  reserve: Reserve
  amount: BigInt

  depositHistory: [Deposit!] @derivedFrom(field: "userTx")
  withdrawHistory: [Withdraw!] @derivedFrom(field: "userTx")
  borrowHistory: [Borrow!] @derivedFrom(field: "userTx")
  repayHistory: [Repay!] @derivedFrom(field: "userTx")
  auctionHistory: [Auction!] @derivedFrom(field: "userTx")
  redeemHistory: [Redeem!] @derivedFrom(field: "userTx")
  liquidateHistory: [Liquidate!] @derivedFrom(field: "userTx")
}

type Deposit implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  onBehalfOf: User!
  amount: BigInt!
  referrer: Referrer
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Withdraw implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  to: User!
  amount: BigInt!
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Borrow implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  onBehalfOf: User!
  amount: BigInt!
  borrowRate: BigInt!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  loan: Loan!
  referrer: Referrer
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Repay implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  borrower: User!
  loan: Loan!
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Auction implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  bidPrice: BigInt!
  onBehalfOf: User!
  borrower: User!
  loan: Loan!
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Redeem implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  repayAmount: BigInt!
  bidFine: BigInt!
  borrower: User!
  loan: Loan!
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type Liquidate implements UserTransaction @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  user: User!
  nftAsset: NFT!
  userNft: UserNft!
  nftTokenId: BigInt!
  reserve: Reserve!
  userReserve: UserReserve!
  repayAmount: BigInt!
  remainAmount: BigInt!
  borrower: User!
  loan: Loan!
  timestamp: Int!
  userTx: UserTransactionHistoryItem!
}

type ReserveConfigurationHistoryItem @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  reserve: Reserve!
  borrowingEnabled: Boolean!
  isActive: Boolean!
  isFrozen: Boolean!
  reserveInterestRateStrategy: Bytes!
  timestamp: Int!
}

type NftConfigurationHistoryItem @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  nftAsset: NFT!
  isActive: Boolean!
  isFrozen: Boolean!
  baseLTVasCollateral: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  redeemDuration: BigInt!
  auctionDuration: BigInt!
  redeemFine: BigInt!
  redeemThreshold: BigInt!
  minBidFine: BigInt!
  timestamp: Int!
}

type ReserveParamsHistoryItem @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  reserve: Reserve!
  variableBorrowRate: BigInt!
  variableBorrowIndex: BigInt!
  utilizationRate: BigDecimal!
  debtUtilizationRate: BigDecimal!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  totalLiquidity: BigInt!
  totalBTokenSupply: BigInt!
  availableLiquidity: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!
  totalScaledVariableDebt: BigInt!
  totalCurrentVariableDebt: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeDeposits: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
  lifetimeReserveFactorAccrued: BigInt!
  lifetimeDepositorsInterestEarned: BigInt!
}

type NftParamsHistoryItem @entity(immutable: false) {
  """
  tx hash
  """
  id: ID!
  nftAsset: NFT!
  totalCollateral: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!

  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeAuctions: BigInt!
  lifetimeRedeems: BigInt!
  lifetimeLiquidated: BigInt! # default: 0
}

type MapAssetPool @entity(immutable: false) {
  """
  address of a /s /v token
  """
  id: ID!
  pool: String!
  underlyingAsset: Bytes!
}

type Reserve @entity(immutable: false) {
  """
  Reserve address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  decimals: Int!
  borrowingEnabled: Boolean! # defalt false
  reserveFactor: BigInt! #default 0
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false
  price: PriceOracleAsset!

  bToken: BToken!
  debtToken: DebtToken!

  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  baseVariableBorrowRate: BigInt!
  utilizationRate: BigDecimal! # default: 0
  debtUtilizationRate: BigDecimal!
  liquidityRate: BigInt! # depositors interest
  variableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!

  totalLiquidity: BigInt! # default: 0
  availableLiquidity: BigInt! # default: 0
  totalBTokenSupply: BigInt!
  totalScaledVariableDebt: BigInt! # default: 0
  totalCurrentVariableDebt: BigInt! # default: 0

  createTimestamp: Int!
  lastUpdateTimestamp: Int!

  lifetimeScaledVariableDebt: BigInt! # default: 0
  lifetimeCurrentVariableDebt: BigInt! # default: 0
  lifetimeDeposits: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeReserveFactorAccrued: BigInt!

  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")

  depositHistory: [Deposit!]! @derivedFrom(field: "reserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "reserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "reserve")
  auctionHistory: [Auction!]! @derivedFrom(field: "reserve")
  redeemHistory: [Redeem!]! @derivedFrom(field: "reserve")
  repayHistory: [Repay!]! @derivedFrom(field: "reserve")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "reserve")

  paramsHistory: [ReserveParamsHistoryItem!]! @derivedFrom(field: "reserve")
  configurationHistory: [ReserveConfigurationHistoryItem!]! @derivedFrom(field: "reserve")
}

type NFT @entity(immutable: false) {
  """
  NFT address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false
  baseLTVasCollateral: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  redeemDuration: BigInt!
  auctionDuration: BigInt!
  redeemFine: BigInt!
  redeemThreshold: BigInt!
  minBidFine: BigInt!
  bnftToken: Bytes!
  price: PriceOracleAsset!

  totalCollateral: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeAuctions: BigInt! # default: 0
  lifetimeRedeems: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0

  createTimestamp: Int!
  lastUpdateTimestamp: Int!

  userNfts: [UserNft!]! @derivedFrom(field: "nftAsset")
  loans: [Loan!]! @derivedFrom(field: "nftAsset")

  borrowHistory: [Borrow!]! @derivedFrom(field: "nftAsset")
  repayHistory: [Repay!]! @derivedFrom(field: "nftAsset")
  auctionHistory: [Auction!]! @derivedFrom(field: "nftAsset")
  redeemHistory: [Redeem!]! @derivedFrom(field: "nftAsset")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "nftAsset")
  loanHistory: [Loan!]! @derivedFrom(field: "nftAsset")

  paramsHistory: [NftParamsHistoryItem!]! @derivedFrom(field: "nftAsset")
  configurationHistory: [NftConfigurationHistoryItem!]! @derivedFrom(field: "nftAsset")
}

type BTokenEventHistoryItem @entity(immutable: false) {
  """
  userReserve + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  userReserve: UserReserve!
  eventType: TokenEventType!
  amount: BigInt!
  to: Bytes
  timestamp: Int!
}

type BTokenBalanceHistoryItem @entity(immutable: false) {
  """
  userReserve + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  userReserve: UserReserve!
  timestamp: Int!
  scaledBTokenBalance: BigInt!
  currentBTokenBalance: BigInt!
  index: BigInt!
}

type DebtTokenEventHistoryItem @entity(immutable: false) {
  """
  userReserve + txHash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  pool: Pool!
  user: User!
  userReserve: UserReserve!
  eventType: TokenEventType!
  amount: BigInt!
  timestamp: Int!
}

type DebtTokenBalanceHistoryItem @entity(immutable: false) {
  """
  userReserve + txHash
  """
  id: ID!
  userReserve: UserReserve!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  timestamp: Int!
  index: BigInt!
}

type UserReserve @entity(immutable: false) {
  """
  user address + reserve address
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  scaledBTokenBalance: BigInt!
  currentBTokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  currentTotalDebt: BigInt!
  liquidityRate: BigInt!
  variableBorrowIndex: BigInt!

  lifetimeDeposits: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0

  """
  Amount in currency units included as fee
  """
  lastUpdateTimestamp: Int!
  bTokenBalanceHistory: [BTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  debtTokenBalanceHistory: [DebtTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")

  depositHistory: [Deposit!]! @derivedFrom(field: "userReserve")
  withdrawHistory: [Withdraw!]! @derivedFrom(field: "userReserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "userReserve")
  repayHistory: [Repay!]! @derivedFrom(field: "userReserve")
  auctionHistory: [Auction!]! @derivedFrom(field: "userReserve")
  redeemHistory: [Redeem!]! @derivedFrom(field: "userReserve")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "userReserve")
}

type UserNft @entity(immutable: false) {
  """
  user address + nft collection address
  """
  id: ID!
  pool: Pool!
  nftAsset: NFT!
  user: User!

  totalCollateral: BigInt!

  lastUpdateTimestamp: Int!

  borrowHistory: [Borrow!]! @derivedFrom(field: "userNft")
  repayHistory: [Repay!]! @derivedFrom(field: "userNft")
  auctionHistory: [Auction!]! @derivedFrom(field: "userNft")
  redeemHistory: [Redeem!]! @derivedFrom(field: "userNft")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "userNft")
}

type LoanBalanceHistoryItem @entity(immutable: false) {
  """
  loan + txHash
  """
  id: ID!
  loan: Loan!
  timestamp: Int!
  scaledAmount: BigInt!
  currentAmount: BigInt!
  index: BigInt!
}

type Loan @entity(immutable: false) {
  """
  loan id
  """
  id: ID!
  pool: Pool!
  user: User!
  loanId: BigInt!
  borrower: User!
  nftAsset: NFT!
  nftTokenId: BigInt!
  reserveAsset: Reserve!
  scaledAmount: BigInt!
  currentAmount: BigInt!
  state: LoanState!
  bidStartTimestamp: Int!
  bidderUser: User!
  bidderAddress: Bytes!
  bidPrice: BigInt!
  bidBorrowAmount: BigInt!

  lifetimeBorrows: BigInt!
  lifetimeRepays: BigInt!
  lifetimeRedeems: BigInt!
  lastUpdateTimestamp: Int!

  borrowHistory: [Borrow!]! @derivedFrom(field: "loan")
  repayHistory: [Repay!]! @derivedFrom(field: "loan")
  auctionHistory: [Auction!]! @derivedFrom(field: "loan")
  redeemHistory: [Redeem!]! @derivedFrom(field: "loan")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "loan")
  loanBalanceHistory: [LoanBalanceHistoryItem!]! @derivedFrom(field: "loan")
}

type User @entity(immutable: false) {
  """
  user address
  """
  id: ID!
  borrowedReservesCount: Int!
  collateralNftsCount: Int!

  reserves: [UserReserve!]! @derivedFrom(field: "user")
  nfts: [UserNft!]! @derivedFrom(field: "user")
  loans: [Loan!]! @derivedFrom(field: "user")
  incentives: [UserIncentive!]! @derivedFrom(field: "user")

  depositHistory: [Deposit!]! @derivedFrom(field: "user")
  withdrawUnderlyingHistory: [Withdraw!]! @derivedFrom(field: "user")
  borrowHistory: [Borrow!]! @derivedFrom(field: "user")
  repayHistory: [Repay!]! @derivedFrom(field: "user")
  auctionHistory: [Auction!]! @derivedFrom(field: "user")
  redeemHistory: [Redeem!]! @derivedFrom(field: "user")
  liquidateHistory: [Liquidate!]! @derivedFrom(field: "user")

  bTokenHistory: [BTokenEventHistoryItem!]! @derivedFrom(field: "user")
  debtTokenHistory: [DebtTokenEventHistoryItem!]! @derivedFrom(field: "user")
}

type DistributionManagerUserAsset @entity(immutable: false) {
  id: ID!
  lastUpdateTimestamp: Int!

  user: User!
  distributionManager: DistributionManager!
  asset: DistributionManagerAsset!
  index: BigInt!
  assetAddress: Bytes!
}

type DistributionManagerAsset @entity(immutable: false) {
  id: ID!
  lastUpdateTimestamp: Int!

  distributionManager: DistributionManager!

  assetAddress: Bytes!
  emissionPerSecond: BigInt!
  index: BigInt!

  users: [DistributionManagerUserAsset!]! @derivedFrom(field: "asset")
}

type DistributionManager @entity(immutable: false) {
  id: ID!
  lastUpdateTimestamp: Int!

  distributionEnd: BigInt!

  assets: [DistributionManagerAsset!]! @derivedFrom(field: "distributionManager")
  userAssets: [DistributionManagerUserAsset!]! @derivedFrom(field: "distributionManager")
}

type RewardsAccruedHistoryItem @entity(immutable: false) {
  id: ID!
  timestamp: Int!

  userIncentive: UserIncentive!
  amount: BigInt!
}

type RewardsClaimedHistoryItem @entity(immutable: false) {
  id: ID!
  timestamp: Int!

  userIncentive: UserIncentive!
  amount: BigInt!
}

type UserIncentive @entity(immutable: false) {
  id: ID!
  lastUpdateTimestamp: Int!

  user: User!
  distributionManager: DistributionManager!
  asset: DistributionManagerAsset!
  userAsset: DistributionManagerUserAsset!

  reward: BigInt!
  lifetimeRewards: BigInt!
  lifetimeClaimed: BigInt!

  rewardsAccruedHistory: [RewardsAccruedHistoryItem!]! @derivedFrom(field: "userIncentive")
  rewardsClaimedHistory: [RewardsClaimedHistoryItem!]! @derivedFrom(field: "userIncentive")
}